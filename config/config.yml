logging:
  version: 1
  formatters:
    simpleFormatter:
      format: "[%(asctime)s] - %(name)s - %(levelname)s - %(message)s"
  handlers:
    consoleHandler:
      class: logging.StreamHandler
      level: INFO
      formatter: simpleFormatter
      stream: ext://sys.stdout
    fileHandler:
      class: logging.handlers.TimedRotatingFileHandler
      level: DEBUG
      filename: logs1.log
      when: midnight
      interval: 1
      backupCount: 30
      formatter: simpleFormatter
  loggers:
    myLogger:
      level: DEBUG
      handlers: [consoleHandler, fileHandler]
      propagate: no
  root:
    level: DEBUG
    handlers: [consoleHandler, fileHandler]

reddit:
  client_id: 'client_id'
  client_secret: 'client_secret'
  user_agent: 'user_agent'
  redirect_url: 'redirect_url'

reddit_search:
  subreddit: 'data+analyst+science+engineering+IA+machine+deep+learing+chatgpt+big+data'
  limit: 20
  time_filter: 'day' # past hour, day, week, month, year, all

s3:
  access_key: 'ACCESS_KEY'
  secret_key: 'SECRET_ACCESS_KEY'
  src_endpoint_url: 'https://s3.amazonaws.com'
  src_bucket: 'pde-data-reddit'
  trg_endpoint_url: 'https://s3.amazonaws.com'
  trg_bucket: ''

folder_bucket:
  comment_folder: 'comments'
  post_folder: 'posts'
  transformed_comments: transformed_comments
  transformed_posts: transformed_posts


params_comments_data:
  droped_columns: ['permalink']
  correct_data_types: {"created_utc": ['datetime', 's']}
  clean_string: 
    column: "body"
    pattern: "[\\n\\r\\a\\s+]+|/r"
    new_string: " "
  threshold: 0.4
  apply_func_to_df: 
  rename_columns: {'score': 'score_cmt', 'created_utc': 'created_utc_cmt'}

params_posts_data:
  droped_columns: ['permalink', 'subreddit_name_prefixed', 'subreddit_type', 'selftext', 'link_flair_richtext']
  correct_data_types: {"created_utc": ['datetime', 's']}
  apply_func_to_df: 
    func_name: "DataProcessor.get_value" # static function "class.func" or "func"
    column: "link_flair_richtext"
    new_column_name: "flair"
  threshold: 0.4
  clean_string:

postgresql: postgresql

mysql: mysql

mysql_tables:
  posts: Posts
  comments: Comments


redshift:
  redshift_host: redshift_host
  redshift_port: redshift_port
  redshift_user: redshift_user
  redshift_password: redshift_password
  redshift_db: redshift_db

redshift_tables:
  posts: posts
  comments: comments
  fact: fact

names_files_etl:
  extract: extract.py
  load: load.py
  transform: transform.py

params_load:
  droped_columns_cmt: ['score_cmt', 'post_id']
  droped_columns_pst: ['ups', 'subscribers', 'num_comments', 'upvote_ratio', 'score']
  merged_columns_cmt: ['comment_id', 'post_id', 'score_cmt']
  merged_columns_pst: ['post_id', 'score', 'upvote_ratio', 'num_comments', 'subscribers', 'ups']
  merge_key: post_id